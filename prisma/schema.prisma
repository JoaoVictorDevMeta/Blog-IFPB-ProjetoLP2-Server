// Prisma Setup

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String 
  description String?
  course String
  verified Boolean @default(false)
  password String
  role String
  imageUrl String?
  BannerUrl String?

  blogs Blog[]
  notifications Notification[]
  likes like[]
  comments Comment[]
  token Token?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification{
  id Int @id @default(autoincrement())
  userId Int
  message String
  read Boolean @default(false)
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id Int @id @default(autoincrement())
  userId Int @unique
  token String @unique
  createdAt DateTime @default(now())
  expiresAt DateTime 
  user User @relation(fields: [userId], references: [id])
}

model Blog {
  id Int @id @default(autoincrement())
  authorId Int
  title String
  subTitle String 
  createdAt DateTime @default(now())
  editedAt DateTime @updatedAt
  author User @relation(fields: [authorId], references: [id])
  categories Category[]
  content Blog_Content[]
  likes like[]
  comments Comment[]
  tags BlogTag[]
}

model like {
  id Int @id @default(autoincrement())
  userId Int 
  blogId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  blogs Blog[]
}

model Blog_Content {
  id Int @id @default(autoincrement())
  blogId Int
  title String
  offset Int
  imageUrl String?
  imageRef String?
  content String
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  blogId    Int
  parentId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentToComment")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  blogs BlogTag[]
}

model BlogTag {
  id     Int  @id @default(autoincrement())
  blogId Int
  tagId  Int
  blog   Blog @relation(fields: [blogId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])
}